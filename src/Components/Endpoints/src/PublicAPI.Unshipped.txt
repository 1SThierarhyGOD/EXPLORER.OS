abstract Microsoft.AspNetCore.Components.Infrastructure.RazorComponentApplicationAttribute.GetBuilder() -> Microsoft.AspNetCore.Components.ComponentApplicationBuilder!
Microsoft.AspNetCore.Builder.RazorComponentEndpointConventionBuilder
Microsoft.AspNetCore.Builder.RazorComponentEndpointConventionBuilder.Add(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder!>! convention) -> void
Microsoft.AspNetCore.Builder.RazorComponentEndpointConventionBuilder.Finally(System.Action<Microsoft.AspNetCore.Builder.EndpointBuilder!>! finallyConvention) -> void
Microsoft.AspNetCore.Builder.RazorComponentsEndpointRouteBuilderExtensions
Microsoft.AspNetCore.Components.ComponentApplicationBuilder
Microsoft.AspNetCore.Components.ComponentApplicationBuilder.AddLibrary(Microsoft.AspNetCore.Components.ComponentLibraryBuilder! libraryBuilder) -> void
Microsoft.AspNetCore.Components.ComponentApplicationBuilder.Build() -> Microsoft.AspNetCore.Components.RazorComponentApplication!
Microsoft.AspNetCore.Components.ComponentApplicationBuilder.Combine(Microsoft.AspNetCore.Components.ComponentApplicationBuilder! other) -> void
Microsoft.AspNetCore.Components.ComponentApplicationBuilder.ComponentApplicationBuilder() -> void
Microsoft.AspNetCore.Components.ComponentApplicationBuilder.Components.get -> Microsoft.AspNetCore.Components.ComponentCollectionBuilder!
Microsoft.AspNetCore.Components.ComponentApplicationBuilder.Exclude(Microsoft.AspNetCore.Components.ComponentApplicationBuilder! builder) -> void
Microsoft.AspNetCore.Components.ComponentApplicationBuilder.HasAssembly(string! assemblyName) -> bool
Microsoft.AspNetCore.Components.ComponentApplicationBuilder.Pages.get -> Microsoft.AspNetCore.Components.PageCollectionBuilder!
Microsoft.AspNetCore.Components.ComponentApplicationBuilder.Remove(string! assembly) -> void
Microsoft.AspNetCore.Components.ComponentBuilder
Microsoft.AspNetCore.Components.ComponentBuilder.ComponentBuilder() -> void
Microsoft.AspNetCore.Components.ComponentBuilder.ComponentType.get -> System.Type?
Microsoft.AspNetCore.Components.ComponentBuilder.ComponentType.set -> void
Microsoft.AspNetCore.Components.ComponentBuilder.Equals(Microsoft.AspNetCore.Components.ComponentBuilder? other) -> bool
Microsoft.AspNetCore.Components.ComponentBuilder.Source.get -> string?
Microsoft.AspNetCore.Components.ComponentBuilder.Source.set -> void
Microsoft.AspNetCore.Components.ComponentCollectionBuilder
Microsoft.AspNetCore.Components.ComponentCollectionBuilder.ComponentCollectionBuilder() -> void
Microsoft.AspNetCore.Components.ComponentInfo
Microsoft.AspNetCore.Components.ComponentInfo.ComponentInfo(System.Type! componentType) -> void
Microsoft.AspNetCore.Components.ComponentInfo.ComponentType.get -> System.Type!
Microsoft.AspNetCore.Components.ComponentLibraryBuilder
Microsoft.AspNetCore.Components.ComponentLibraryBuilder.ComponentLibraryBuilder(string! name, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Components.PageComponentBuilder!>! pages, System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Components.ComponentBuilder!>! components) -> void
Microsoft.AspNetCore.Components.ComponentLibraryBuilder.Components.get -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Components.ComponentBuilder!>!
Microsoft.AspNetCore.Components.ComponentLibraryBuilder.Name.get -> string!
Microsoft.AspNetCore.Components.ComponentLibraryBuilder.Pages.get -> System.Collections.Generic.IEnumerable<Microsoft.AspNetCore.Components.PageComponentBuilder!>!
Microsoft.AspNetCore.Components.Endpoints.ComponentTypeMetadata
Microsoft.AspNetCore.Components.Endpoints.ComponentTypeMetadata.ComponentTypeMetadata(System.Type! componentType) -> void
Microsoft.AspNetCore.Components.Endpoints.ComponentTypeMetadata.Type.get -> System.Type!
Microsoft.AspNetCore.Components.Endpoints.IComponentPrerenderer
Microsoft.AspNetCore.Components.Endpoints.IComponentPrerenderer.Dispatcher.get -> Microsoft.AspNetCore.Components.Dispatcher!
Microsoft.AspNetCore.Components.Endpoints.IComponentPrerenderer.PrerenderComponentAsync(Microsoft.AspNetCore.Http.HttpContext! httpContext, System.Type! componentType, Microsoft.AspNetCore.Components.IComponentRenderMode! renderMode, Microsoft.AspNetCore.Components.ParameterView parameters) -> System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Html.IHtmlAsyncContent!>
Microsoft.AspNetCore.Components.Endpoints.IComponentPrerenderer.PrerenderPersistedStateAsync(Microsoft.AspNetCore.Http.HttpContext! httpContext, Microsoft.AspNetCore.Components.PersistedStateSerializationMode serializationMode) -> System.Threading.Tasks.ValueTask<Microsoft.AspNetCore.Html.IHtmlContent!>
Microsoft.AspNetCore.Components.Endpoints.IRazorComponentsBuilder
Microsoft.AspNetCore.Components.Endpoints.IRazorComponentsBuilder.Services.get -> Microsoft.Extensions.DependencyInjection.IServiceCollection!
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.ComponentType.get -> System.Type!
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.ContentType.get -> string?
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.ContentType.set -> void
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext! httpContext) -> System.Threading.Tasks.Task!
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.Parameters.get -> System.Collections.Generic.IReadOnlyDictionary<string!, object?>!
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.PreventStreamingRendering.get -> bool
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.PreventStreamingRendering.set -> void
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.RazorComponentResult(System.Type! componentType) -> void
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.RazorComponentResult(System.Type! componentType, object? parameters) -> void
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.RazorComponentResult(System.Type! componentType, System.Collections.Generic.IReadOnlyDictionary<string!, object?>? parameters) -> void
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.StatusCode.get -> int?
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult.StatusCode.set -> void
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult<TComponent>
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult<TComponent>.RazorComponentResult() -> void
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult<TComponent>.RazorComponentResult(object! parameters) -> void
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult<TComponent>.RazorComponentResult(System.Collections.Generic.IReadOnlyDictionary<string!, object?>! parameters) -> void
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResultExecutor
Microsoft.AspNetCore.Components.Endpoints.RazorComponentResultExecutor.RazorComponentResultExecutor() -> void
Microsoft.AspNetCore.Components.Endpoints.RootComponentMetadata
Microsoft.AspNetCore.Components.Endpoints.RootComponentMetadata.RootComponentMetadata(System.Type! rootComponentType) -> void
Microsoft.AspNetCore.Components.Endpoints.RootComponentMetadata.Type.get -> System.Type!
Microsoft.AspNetCore.Components.Infrastructure.RazorComponentApplicationAttribute
Microsoft.AspNetCore.Components.Infrastructure.RazorComponentApplicationAttribute.RazorComponentApplicationAttribute() -> void
Microsoft.AspNetCore.Components.PageCollectionBuilder
Microsoft.AspNetCore.Components.PageCollectionBuilder.PageCollectionBuilder() -> void
Microsoft.AspNetCore.Components.PageComponentBuilder
Microsoft.AspNetCore.Components.PageComponentBuilder.Equals(Microsoft.AspNetCore.Components.PageComponentBuilder? other) -> bool
Microsoft.AspNetCore.Components.PageComponentBuilder.HasSource(string! source) -> bool
Microsoft.AspNetCore.Components.PageComponentBuilder.PageComponentBuilder() -> void
Microsoft.AspNetCore.Components.PageComponentBuilder.PageType.get -> System.Type?
Microsoft.AspNetCore.Components.PageComponentBuilder.PageType.set -> void
Microsoft.AspNetCore.Components.PageComponentBuilder.RouteTemplates.get -> System.Collections.Generic.List<string!>?
Microsoft.AspNetCore.Components.PageComponentBuilder.RouteTemplates.set -> void
Microsoft.AspNetCore.Components.PageComponentBuilder.Source.get -> string?
Microsoft.AspNetCore.Components.PageComponentBuilder.Source.set -> void
Microsoft.AspNetCore.Components.PageComponentInfo
Microsoft.AspNetCore.Components.PageComponentInfo.DisplayName.get -> string!
Microsoft.AspNetCore.Components.PageComponentInfo.Metadata.get -> System.Collections.Generic.IReadOnlyList<object!>!
Microsoft.AspNetCore.Components.PageComponentInfo.Route.get -> string!
Microsoft.AspNetCore.Components.PageComponentInfo.Type.get -> System.Type!
Microsoft.AspNetCore.Components.PersistedStateSerializationMode
Microsoft.AspNetCore.Components.PersistedStateSerializationMode.Infer = 1 -> Microsoft.AspNetCore.Components.PersistedStateSerializationMode
Microsoft.AspNetCore.Components.PersistedStateSerializationMode.Server = 2 -> Microsoft.AspNetCore.Components.PersistedStateSerializationMode
Microsoft.AspNetCore.Components.PersistedStateSerializationMode.WebAssembly = 3 -> Microsoft.AspNetCore.Components.PersistedStateSerializationMode
Microsoft.AspNetCore.Components.RazorComponentApplication
Microsoft.AspNetCore.Components.RazorComponentApplication.Components.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.ComponentInfo!>!
Microsoft.AspNetCore.Components.RazorComponentApplication.Pages.get -> System.Collections.Generic.IReadOnlyList<Microsoft.AspNetCore.Components.PageComponentInfo!>!
Microsoft.Extensions.DependencyInjection.RazorComponentsServiceCollectionExtensions
override Microsoft.AspNetCore.Components.ComponentBuilder.Equals(object? obj) -> bool
override Microsoft.AspNetCore.Components.ComponentBuilder.GetHashCode() -> int
override Microsoft.AspNetCore.Components.PageComponentBuilder.Equals(object? obj) -> bool
override Microsoft.AspNetCore.Components.PageComponentBuilder.GetHashCode() -> int
static Microsoft.AspNetCore.Builder.RazorComponentsEndpointRouteBuilderExtensions.MapRazorComponents<TRootComponent>(this Microsoft.AspNetCore.Routing.IEndpointRouteBuilder! endpoints) -> Microsoft.AspNetCore.Builder.RazorComponentEndpointConventionBuilder!
static Microsoft.Extensions.DependencyInjection.RazorComponentsServiceCollectionExtensions.AddRazorComponents(this Microsoft.Extensions.DependencyInjection.IServiceCollection! services) -> Microsoft.AspNetCore.Components.Endpoints.IRazorComponentsBuilder!
static readonly Microsoft.AspNetCore.Components.Endpoints.RazorComponentResultExecutor.DefaultContentType -> string!
virtual Microsoft.AspNetCore.Components.Endpoints.RazorComponentResultExecutor.ExecuteAsync(Microsoft.AspNetCore.Http.HttpContext! httpContext, Microsoft.AspNetCore.Components.Endpoints.RazorComponentResult! result) -> System.Threading.Tasks.Task!
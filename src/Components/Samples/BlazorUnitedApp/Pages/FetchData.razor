@page "/fetchdata"
@attribute [ComponentRenderMode(WebComponentRenderMode.Auto)]
@attribute [StreamRendering(true)]
@inject PersistentComponentState PersistentState
@using BlazorUnitedApp.Data

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<p><button class="btn btn-primary" @onclick="MoveNext">Next</button></p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    DateTime date;
    WeatherForecast[]? forecasts;

    [Parameter] public DateTime InitialDate { get; set; } = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        date = InitialDate;

        PersistentState.RegisterOnPersisting(() =>
        {
            PersistentState.PersistAsJson(nameof(forecasts), forecasts);
            return Task.CompletedTask;
        });

        if (!PersistentState.TryTakeFromJson(nameof(forecasts), out forecasts))
        {
            forecasts = await GetForecastAsync(date);
        }
    }

    async Task MoveNext()
    {
        date = date.AddDays(7);
        forecasts = null; // Show "loading..."
        forecasts = await GetForecastAsync(date);
    }
}

@inject IHttpContextAccessor HttpContextAccessor
<div class="reviews">
    <h2>Reviews</h2>
    <EditForm method="post" class="review-editor" EditContext="editContext" enhance>
        <StarRating @bind-Value="review.Rating" />
        <ValidationMessage For="@(() => review.Rating)" />

        <InputTextArea rows="5" name="review-text" placeholder="Write a review" @bind-Value="review.Text" />
        <ValidationMessage For="@(() => review.Text)" />

        <button type="submit">Submit</button>
    </EditForm>
    @for (int i = 0; i < Reviews.Count; i++)
    {
        var review = Reviews[i];
        <div class="review">
            <StarRating Value="review.Rating" />
            <p>@review.Text</p>
            @if (i < Reviews.Count - 1)
            {
                <hr />
            }
        </div>
    }
</div>

@code {
    EditContext? editContext;
    Review review = default!;

    [Parameter, EditorRequired]
    public IList<Review> Reviews { get; set; } = default!;

    [Parameter]
    public EventCallback<Review> OnSubmitReview { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        if (httpContext.Request.HasFormContentType)
        {
            var form = httpContext.Request.Form;
            review = new Review
            {
                Rating = int.TryParse(form["star-rating"], out var starRating) ? starRating : 0,
                Text = form["review-text"],
            };
            editContext = new EditContext(review).AddDataAnnotationsValidation();
            if (editContext.Validate())
            {
                await OnSubmitReview.InvokeAsync(review);
                httpContext.Response.Redirect(httpContext.Request.Path);
            }
        }
        else
        {
            review = new();
            editContext = new(review);
        }
    }
}

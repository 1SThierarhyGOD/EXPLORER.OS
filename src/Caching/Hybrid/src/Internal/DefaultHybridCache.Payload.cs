// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

namespace Microsoft.Extensions.Caching.Hybrid.Internal;

// logic related to the payload that we send to IDistributedCache
internal sealed partial class DefaultHybridCache
{
    // layout:
    // 2 bytes: [Flags]
    // 8 bytes: [Entropy][CreationTime]
    // 4 bytes: [PayloadSize]
    // 5 bytes: [TTL]
    // 1 byte: [TagCount]
    // (String): Key
    // TagCount * (String): tags
    // remaining bytes: payload (compressed if flag set)
    //
    // (String) consists of 1-or-two bytes of length as a prefix; if the LSB of the
    // first byte is 0, it is a 1-byte prefix corresponding to up to 127 bytes of
    // content; if the LSB of the first byte is 1, then this is combined with the next
    // byte (LE) to give up to 32767 bytes of content; keys and strings above this size are
    // not supported. The prefix is followed by the specified number of bytes which should
    // be interpreted as UTF8.
    //
    // Entropy is 19 bits of random noise generated by the sending node; this noise
    // is used to avoid self-invalidation, i.e. if the entropy and creation time
    // of a received invalidation message BOTH match against the local L1 value,
    // it is presumed to be our own data, and the invalidation is ignored; this
    // gives a *same millisecond* collision a 1-in-524288 chance of incorrectly
    // retaining data, which is acceptable. We could also choose to include the
    // PayloadSize in this calculation, which would further reduce this (a match
    // here also suggests - inconclusively - that the colliding data is identical);
    // for that reason, Entropy, CreationTime and PayloadSize are early bytes

    // CreationTime is 45 bits as milliseconds into UTC unix epoch as UTC,
    // this is 5 bytes and 5 bits; this uses little-endian integer encoding
    //
    // TTL is 5 bytes as milliseconds, little-endian
    //
    // TagCount is the number of tags; a maximum of 255 tags per entry is supported
    //
    // PayloadSize is the size of the body payload in bytes, AFTER EXPANSION if compressed,
    // as a 32-bit little-endian integer; maximum supported payload size is ~4GiB; a future
    // Flags entry may allow for larger PayloadSize chunks
    //
    // Note on time: 45 bits (CreationTime) gives us 35184372088831ms
    // 35184372088831ms is 35184372088s, 586406201 minutes, 9773436 hours, 407226 days,
    // which is 1143 years
    //
    // 40 bits (TTL) gives us 1099511627775ms, which is nearly 35 yeas; plenty for a cache
    // system (24 bits only gives us 24 days, which is a little on the tight side)
    private readonly struct PayloadFrame
    {
        public string Key { get; }
        public long CreationTime { get; }
    }
}
